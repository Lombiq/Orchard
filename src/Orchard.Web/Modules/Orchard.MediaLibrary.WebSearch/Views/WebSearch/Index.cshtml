@model Orchard.MediaLibrary.ViewModels.ImportMediaViewModel

@using System.Text
@using Orchard.ContentManagement
@using Orchard.MediaLibrary.WebSearch.Models
@using Orchard.MediaLibrary.WebSearch.Providers
@using System.Linq

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    @{
        Script.Require("jQuery").AtFoot();
        Script.Require("Knockout").AtFoot();

        Style.Include("orchard-mediaproviders-admin.css");
        Style.Include("orchard-websearch-admin.css");
        Style.Require("FontAwesome");
    }

    @Display.Metas()
    @Display.HeadScripts()
    @Display.HeadLinks()
    @Display.StyleSheetLinks()

    @{
        var webSearchProviders = WorkContext.Resolve<IEnumerable<IWebSearchProvider>>();

        var pixabayApiKey = webSearchProviders.FirstOrDefault(provider => provider.Name == "Pixabay")?.ApiKey ?? "";
        var bingApiKey = webSearchProviders.FirstOrDefault(provider => provider.Name == "Bing")?.ApiKey ?? "";
        var apiNames = webSearchProviders.Select(provider => provider.Name);
    }
</head>
<body>
    <div id="websearch-main">
        <!-- Register for an API account on https://datamarket.azure.com/dataset/5BA839F1-12CE-4CCE-BF57-A49D98D29A44 -->

        @if (String.IsNullOrWhiteSpace(pixabayApiKey))
        {
            <div id="message-api">
                @T("You need to define an API Key in the Media settings before being able to use this feature.")
            </div>
        }
        <form data-bind="submit: doSearch">
            <div class="query-container">
                <div id="icon">
                    <button type="submit" class="fa fa-search"></button>
                </div>
                <div id="query">
                    <input type="text" autofocus=autofocus placeholder="@T("search")" />
                </div>
                <div id="selectSearchApi">
                    @Html.DropDownList("ApiNames", new SelectList(apiNames))
                </div>
            </div>
        </form>

        <ul id="websearch-results" data-bind="foreach: results">
            <li data-bind="style: { backgroundImage: 'url(' + data.backgroundImage + ')' }, css:  { 'has-focus': hasFocus(), 'selected': selected() }">
                <div class="overlay">
                    <p class="filename" data-bind="text: getFilename()"></p>
                    <p class="dimensions" data-bind="text: data.webformatWidth + ' x ' +  data.webformatHeight + ' - ' + Math.round(data.imageSize/1024) + ' KB'"></p>
                </div>
            </li>
        </ul>
    </div>

    <div id="websearch-properties">
        <article data-bind="with: focus">
            <h1>@T("PROPERTIES")</h1>
            <div class="thumbnail" data-bind="style: { backgroundImage: 'url(' + data.backgroundImage + ')' }"></div>
            <div class="dimensions"><em>@T("Dimensions:")</em> <span data-bind="text: data.webformatWidth + ' x ' +  data.webformatHeight"></span></div>
            <div class="filename"><em>@T("Filename:")</em> <span data-bind="text: getFilename()"></span></div>
            <div class="filesize"><em>@T("Size:")</em> <span data-bind="text: Math.round(data.imageSize/1024) + ' KB'"></span></div>
            <div class="actions">
                <a class="source button" data-bind="attr: {href: data.imageUrl}" target="_blank">@T("Page")</a>
                <a class="media button" data-bind="attr: {href: data.imageUrl}" target="_blank">@T("Open")</a>
            </div>
        </article>

        <div id="websearch-properties-selection" data-bind="visible: selection().length">
            <h1>@T("SELECTION")</h1>
            <button id="button-import">@if (Model.Replace == null)
            {<text>@T("Import")</text> }
        else
        { <text>@T("Replace")</text>} </button>
            <ul data-bind="foreach: selection">
                <li>
                    <div class="selection" data-bind="click: $parent.focus, style: { backgroundImage: 'url(' + data.backgroundImage + ')' }">
                        <div class="selection-overlay">
                            <div class="selection-progress" data-bind="css: status(), attr: { 'title': tooltip() == '' ? null : tooltip() }"></div>
                        </div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
    l
    @using (Script.Foot())
    {
        <script type="text/javascript">
        //<![CDATA[
        $(function () {
            function SearchResult(data) {
                var self = this;

                // values
                self.data = data;
                self.hasFocus = ko.observable();
                self.selected = ko.observable();
                self.status = ko.observable('');
                self.tooltip = ko.observable('');

                self.data.imageUrl = self.data.largeImageURL || self.data.contentUrl;
                self.data.backgroundImage = self.data.previewURL || self.data.thumbnailUrl;

                // operations
                self.setData = function (value) {
                    self.data = value;
                };

                self.getFilename = function () {
                    var value = self.data.imageUrl;
                    return value.substr(value.lastIndexOf('/') + 1);
                };

                self.kilobytes = function () {
                    return Math.round(self.data.imageSize / 1024);
                };
            }

            function WebSearchViewModel() {
                var self = this;

                // values
                self.selection = ko.observableArray([]);
                self.focus = ko.observable();
                self.results = ko.observableArray();

                self.filename = function () {
                    return value.substr(value.lastIndexOf('/') + 1);
                };

                self.doSearch = function () {
                    var query = $('#query > input').val();

                    var selectedApi = $('#selectSearchApi select').val();
                    switch (selectedApi) {
                        case "Pixabay":
                            self.doPixabaySearch(query);
                            break;
                        case "Bing":
                            self.doBingSearch(query);
                            break;
                        default:
                    }
                };

                self.doBingSearch = function (query) {
                    var url = 'https://api.cognitive.microsoft.com/bing/v7.0/search?q=' + encodeURIComponent(query);
                    var header = { "Ocp-Apim-Subscription-Key": "@bingApiKey" };

                    $.ajax({
                        type: 'GET',
                        url: url,
                        headers: header,
                    }).done(function (msg) {
                        var results = msg.images.value;
                        self.clearSelection();
                        self.results([]);
                        for (var i = 0; i < results.length; i++) {
                            self.results.push(new SearchResult(results[i]));
                        }
                    });
                };

                self.doPixabaySearch = function (query) {
                    var url = 'https://pixabay.com/api?q=' + encodeURIComponent(query) + '&key=@pixabayApiKey';

                    $.ajax({
                        type: 'GET',
                        url: url,
                    }).done(function (msg) {
                        var results = msg.hits;
                        self.clearSelection();
                        self.results([]);
                        for (var i = 0; i < results.length; i++) {
                            self.results.push(new SearchResult(results[i]));
                        }
                    });
                };

                self.clearSelection = function () {
                    // unselect previous elements
                    self.selection().forEach(function (item) {
                        item.selected(false);
                    });

                    self.selection([]);
                };

                self.focus.subscribe(function (oldValue) {
                    if (oldValue) {
                        oldValue.hasFocus(false);
                    }
                }, this, "beforeChange");

                self.focus.subscribe(function (newValue) {
                    if (newValue) {
                        newValue.hasFocus(true);
                    }
                });

                self.toggleSelect = function (searchResult) {
                    var index = $.inArray(searchResult, self.selection());
                    if (index == -1) {
                        self.selection.push(searchResult);
                        searchResult.selected(true);
                    } else {
                        self.selection.remove(searchResult);
                        searchResult.selected(false);
                    }

                    self.focus(searchResult);
                };

                self.select = function (searchResult) {
                    var index = $.inArray(searchResult, self.selection());
                    if (index == -1) {
                        self.clearSelection();
                        self.selection([searchResult]);
                        searchResult.selected(true);
                    }

                    self.focus(searchResult);
                };

            };

            var viewModel = new WebSearchViewModel();
            ko.applyBindings(viewModel);

            $("#websearch-results").on("click", "li", function (e) {
                var searchResult = ko.dataFor(this);
                @if(Model.Replace == null) {
                    <text>
                    if (e.ctrlKey) {
                        viewModel.toggleSelect(searchResult);
                    } else {
                        viewModel.select(searchResult);
                    }
                    </text>
                } else {
                    <text>
                    viewModel.select(searchResult);
                    </text>
                }
            }).on("contextmenu", "li", function (e) {
                var searchResult = ko.dataFor(this);
                viewModel.toggleSelect(searchResult);
                return false;
            });

            $("#button-import").on("click", function (e) {
                viewModel.selection().forEach(function (item) {
                    var url = item.data.imageUrl;
                    item.status('uploading');
                    item.tooltip('');
                    @if (Model.Replace == null) {
                        <text>
                        $.post('@Url.Action("Import")', {
                            folderPath: '@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.FolderPath))',
                            type: '@HttpUtility.JavaScriptStringEncode(Model.Type)',
                            url: url,
                            __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
                        })
                        </text>
                    } else {
                        <text>
                        $.post('@Url.Action("Replace")', {
                            replaceId: '@HttpUtility.JavaScriptStringEncode(Model.Replace.Id.ToString())',
                            type: '@HttpUtility.JavaScriptStringEncode(Model.Type)',
                            url: url,
                            __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
                        })
                        </text>
                    }
                   .done(function (data) {
                       if (data.error) {
                           item.status('failure');
                           item.tooltip(data.error);
                       } else {
                           item.status('success');
                           item.tooltip("Media imported successfully.");
                           @if(Model.Replace != null) {
                               <text>
                               window.parent.$("a.button.close")[0].click();
                               </text>
                           }
                       }
                   })
                   .fail(function (jqXhr, data) {
                       console.log('failed: ' + JSON.stringify(textStatus));
                       item.status('failure');
                   })
                   .always(function () {
                   });
                });
            });
        })
        //]]>
        </script>
    }

    @Display.FootScripts()
</body>
</html>